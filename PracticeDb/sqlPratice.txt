
CREATE PROCEDURE AddUpdatedProducts
	@ProductId int,
	@ProductName nchar(50),
	@ProductDiscription nchar(50),
	@ProductColor varchar(50),
	@ProductPrice bigint,
	@NoOfProducts bigint,
	@Catagory varchar(50),
	@ShippingAllowed bit,
	@ExpiryDate date,
	@Result bigint output
AS
BEGIN
	Set @Result=CAST(0 AS bigint) 
	if(@ProductId=0)
	Begin
		insert into Products(ProductName,ProductDiscription,ProductColor,ProductPrice,NoOfProducts,Catagory,ShippingAllowed,ExpiryDate)
		values(@ProductName,@ProductDiscription,@ProductColor,@ProductPrice,@NoOfProducts,@Catagory,@ShippingAllowed,@ExpiryDate)
		select @Result=SCOPE_IDENTITY()   
	End
	Else
	Begin
		Update Products set ProductName=@ProductName,ProductDiscription=@ProductDiscription,ProductColor=@ProductColor,ProductPrice=@ProductPrice,NoOfProducts=@NoOfProducts,Catagory=@Catagory,ShippingAllowed=@ShippingAllowed,ExpiryDate=@ExpiryDate
		where ProductId=@ProductId
	End


END
GO


Scaffold-DbContext 'Data Source=(localdb)\MSSQLLocalDB;Database=StudentData;User ID=Harman;Password=Happy@123;' Microsoft.EntityFrameworkCore.SqlServer -force -context EmployeeDbContext -OutputDir Entities
"ConnectionStrings": {
    "StrudentDbContext": "Server=(localdb)\\MSSQLLocalDB;Database=StudentData;User ID=Harman;Password=Happy@123;"
  }

create table School (
  SchoolId bigint NOT NULL primary key,
  GuId int NOT NULL,
  SchoolName varchar(50) NOT NULL,
  City varchar(50) NOT NULL,
  SchoolType bit NOT NULL,
  SchoolLogo image NOT NULL
);

create table Employee(
 EmployeeID bigint primary key identity,
 EmployeeName varchar(50) not null,
 EmployeeEmail varchar(50) not null,
 Salary bigint not null,
 EmployeeAge int not null,
 City varchar(100) not  null,
 IsAlive bit not null
);

insert into Employee (
EmployeeName,
EmployeeEmail,
Salary,
EmployeeAge,
City,
IsAlive
) values (
'Harmanjot',
'Harmanjot.singh@gmail.com',
25000,
21,
'Sangrur',
1
)

select * from Employee 

insert into Employee (
EmployeeName,
EmployeeEmail,
Salary,
EmployeeAge,
City,
IsAlive
) values (
'Jatin',
'Jatin@gmail.com',
100000,
25,
'Sangrur',
1
)
--max salary
select MAX(salary) as MaxSalary from Employee

--max salary from each city
select MAX(salary) as MaxSalary ,City from Employee group by City

--max salary from each city freater than 20000
select MAX(salary) as MaxSalary ,City from Employee group by City  having max(Salary) > 2000000

--delete Duplicate
delete from Employee where EmployeeID not in 
(select max(EmployeeID) from Employee group by EmployeeName,EmployeeEmail,Salary,EmployeeAge)


select EmployeeName,EmployeeEmail,Salary,EmployeeAge from Employee group by EmployeeName,EmployeeEmail,Salary,EmployeeAge

select * from Employee

--case
SELECT EmployeeID,EmployeeName,EmployeeEmail,Salary,EmployeeAge,City, IsAlive,
CASE
    WHEN EmployeeAge > 22 THEN 'Age is greater than 22'
    WHEN EmployeeAge < 22 THEN 'Age is less than 22'
    ELSE 'Age is 22'
END AS AgeRank
FROM Employee;

--isnull
select *,ISNULL(IsFresher,0) as status from Employee

--IIF
select *,IIF(IsAlive=1,'Zinda','Dead') as status  from Employee

EmpTable
24-03-2021
EMPID EMPNAME Salary City
1       Vikash  4000 Yamunanar    
2      Vikash  4000 Chadigarh    

 

1. Max Salary emp
2. Dublicate record Delete
3. Group By command max having 50000 >
4. Select statement Predefined IIF, ISNULL, CASE

25-03-2021
Database: 
School

1. University
2. School
3. Teachers
4. Child

1. Inner,Left and Right (Child List)
2. Search Child name (School, City and State, Father name and Last)
3. School List (University ID)

create table University(
UniversityID bigint primary key identity,
UniversityName varchar(100) not null,
NoOfColleges bigint not null,
UniversityType varchar(50) not null,
IsInternational bit not null
);

select * from University

insert into University(
UniversityName,
NoOfColleges,
UniversityType,
IsInternational
) values (
'Panjab University',
188,
'Govt',
1
);
insert into University(
UniversityName,
NoOfColleges,
UniversityType,
IsInternational
) values (
'LPU',
6,
'Private',
0
);
--college table
create table College(
CollegeID bigint primary key identity,
UniversityID bigint foreign key REFERENCES University(UniversityID) not null,
CollegeName varchar(100) not null,
NoOfStudents bigint not null,
CollegeCity varchar(100) not null,
CollegeState varchar(100) not null,
IsWorking bit not null
);
select * from College
select * from University
insert into College(
UniversityID,
CollegeName,
NoOfStudents,
CollegeCity,
CollegeState,
IsWorking
) values (
8,
'Chemical Dept',
1500,
'Chandigarh',
'Punjab',
1
);

-- Student Table
create table Student(
StudentID bigint primary key identity,
CollegeID bigint foreign key REFERENCES College(CollegeID) not null,
FirstName varchar(100) not null,
LastName varchar(100) not null,
StudentAge int not null,
Email varchar(50),
FatherName varchar(100) not null,
StudentCity varchar(100) not null,
StudentState varchar(100) not null,
Gender bit not null
);

insert into Student(
CollegeID,
FirstName,
LastName,
StudentAge,
Email,
FatherName,
StudentCity,
StudentState,
Gender
) values (
10,
'Student10',
'Last10',
24,
'Student9@gmail.com',
'Father9',
'City9',
'State9',
1
);

select * from Student


--teacher table
create table Teacher(
TeacherID bigint primary key identity,
CollegeID bigint foreign key REFERENCES College(CollegeID) not null,
StudentID bigint foreign key REFERENCES Student(StudentID) not null,
FirstName varchar(100) not null,
LastName varchar(100) not null,
TeacherAge int not null,
Email varchar(50),
SubjectTeaches varchar(100) not null,
TeacherCity varchar(100) not null,
YearOfExperience int not null,
Gender bit not null
);
select * from Teacher
select * from Student
select * from College
select * from University
insert into Teacher (CollegeID,StudentID,FirstName,LastName,TeacherAge,Email,SubjectTeaches,TeacherCity,YearOfExperience,Gender) values
(3,7,'Teacher4','Last4',56,'Teacher4@gmail.com','Aglo','City4',20,1);

--innner join
select * from College c
inner join 
Student s on s.CollegeID =c.CollegeID;


--left join
select * from College c
Left join 
Student s on s.CollegeID =c.CollegeID;


--right join
select * from Student s
right join 
College c on s.CollegeID =c.CollegeID;

--Search Student data with name
DECLARE @Search varchar(50) = 'Student2';
select S.FirstName,S.LastName,S.StudentAge,S.FatherName,C.CollegeName,C.CollegeCity,C.CollegeState from Student S 
inner join
College C on S.CollegeID = C.CollegeID where S.FirstName = @Search;

--college list with university id
select * from College c
inner join 
University u on u.UniversityID =c.UniversityID;



26-03-2021
Assignment 
1. Procedure
    -- All student to belongs to Teacher, college, University
    -- Paging on procedure
    -- Searching Pass string param ('Vikash,Harman') split User Define function
   
2. Insert Student using table type multiple 10 at time
    -- Select data using Views (Create views)
3. Insert data temp table and Select



CREATE PROCEDURE StudentDetails

AS
BEGIN
	Select S.FirstName + S.LastName as StudentName,T.FirstName+T.LastName as TeacherName,C.CollegeName,U.UniversityName from Student S
	inner Join 
	Teacher  T on 
	T.TeacherID =S.TeacherID 
	Inner Join 
	College C on 
	C.CollegeID = S.CollegeID 
	inner join 
	University U on
	U.UniversityID =C.UniversityID
END
GO
-- exec StudentDetails


--Pagination
Declare @Take int = 3;
Declare @PageNo int = 1;
exec Paginations @Take,@PageNo
CREATE PROCEDURE Paginations
@Take int ,
@PageNo int 
AS
BEGIN
 select * from Student S
 inner join 
 Teacher T on 
 S.TeacherID = T.TeacherID
 order by S.StudentID 
OFFSET (@PageNo-1)*@Take ROWS 
FETCH NEXT @Take ROWS ONLY;
end;
drop proc Paginations


--Split function
  Declare @Names varchar(100) = 'Harman,Harmanjot Singh,Happy,Harmanjot'
  Declare @Separator char(2) = ','
  Select * from  Split (@Names,@Separator )

 create function Split (
  @Names varchar(100),
  @Separator char(2)
 )
 RETURNS  table AS
 Return(

  SELECT * FROM STRING_SPLIT(@Names,@Separator) 
  
  )

  --table type
 Create Type UserDefinedTable as table (
CollegeID bigint ,
TeacherID bigint ,
FirstName varchar(100) ,
LastName varchar(100),
StudentAge int,
Email varchar(50),
FatherName varchar(100),
StudentCity varchar(100),
StudentState varchar(100),
Gender bit
);
 
 
 Declare @StudentData UserDefinedTable;
 insert into @StudentData (CollegeID,TeacherID,FirstName,LastName,StudentAge,Email,FatherName,StudentCity,StudentState,Gender) 
 --values (1,2,'Student10','Last10',43,'Student10@gmail.com','Father10','City10','State31',1);
 select * from #TempTable;
 select * from @StudentData
 exec InsertStudent @StudentData

 create Procedure InsertStudent(@StudentData UserDefinedTable READONLY)
 as begin
 insert into Student (CollegeID,TeacherID,FirstName,LastName,StudentAge,Email,FatherName,StudentCity,StudentState,Gender)
 select * from @StudentData
 end;
 drop proc InsertStudent
 select * from Student
 Select * from #TempTable

 --Views 
 CREATE VIEW MaleStudent AS
SELECT *
FROM Student
WHERE Gender = 1;
Select * from MaleStudent

 CREATE VIEW FemaleStudent AS
SELECT *
FROM Student
WHERE Gender = 0;
Select * from FemaleStudent

-- temp tables
Create  table #TempTable  (
CollegeID bigint ,
TeacherID bigint ,
FirstName varchar(100) ,
LastName varchar(100),
StudentAge int,
Email varchar(50),
FatherName varchar(100),
StudentCity varchar(100),
StudentState varchar(100),
Gender bit
);
insert into #TempTable (CollegeID,TeacherID,FirstName,LastName,StudentAge,Email,FatherName,StudentCity,StudentState,Gender) values 
 (1,2,'Student10','Last10',43,'Student10@gmail.com','Father10','City10','State31',1);

 Select * from #TempTable